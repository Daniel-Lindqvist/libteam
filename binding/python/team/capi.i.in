%module capi
%{
#include "@top_srcdir@/include/team.h"

typedef struct _py_func_priv _py_func_priv;
static void PythonCallBack(struct team_handle *th, void *func_priv);
void py_team_change_handler_register(struct team_handle *th,
                                     struct team_change_handler *handler);
void py_team_change_handler_unregister(struct team_handle *th,
                                       struct team_change_handler *handler);
%}

%include <cstring.i>
%include <stdint.i>
%include "typemaps.i"

%apply int *OUTPUT {uint32_t *ifindex};
%cstring_output_allocate(char **mode_name, )

%typemap(in) (char *ifname, unsigned int maxlen) {
    $2 = PyInt_AsLong($input);
    $1 = (char *) malloc(sizeof(char) * $2);
}

%typemap(freearg) (char *ifname, unsigned int maxlen) {
    if ($1) free($1);
}

%apply (char *STRING, int LENGTH) { (const char *addr, unsigned int addr_len) };
int team_hwaddr_set(struct team_handle *th, uint32_t ifindex, const char *addr, unsigned int addr_len);

%typemap(in) (char *addr, unsigned int addr_len) {
    $2 = PyInt_AsLong($input);
    $1 = (char *) malloc(sizeof(char) * $2);
}
%typemap(freearg) (char *addr, unsigned int addr_len) {
    if ($1) free($1);
}
%typemap(argout) (char *addr, unsigned int addr_len) {
    $result = SWIG_Python_AppendOutput($result, PyString_FromStringAndSize($1,$2));
}
%apply char *OUTPUT {char *addr};
int team_hwaddr_get(struct team_handle *th, uint32_t ifindex, char *addr, unsigned int addr_len);

%typemap(python, in) PyObject *PyFunc {
  if (!PyCallable_Check($input)) {
      PyErr_SetString(PyExc_TypeError, "Need a callable object!");
      return NULL;
  }
  $1 = $input;
}

%typemap(in) void (*func)(struct team_handle *, void *) {
    $1 = (void *) $input;
};


%extend team_change_handler {
    team_change_handler(PyObject *func,
                        PyObject *func_priv,
                        enum team_change_type type) {
        struct team_change_handler* handler;
        handler = (struct team_change_handler *)
                                malloc(sizeof(struct team_change_handler));
        handler->func = (void *) func;
        handler->type = type;
        handler->func_priv = (void *) func_priv;
        return handler;
    }

    ~team_change_handler() {
        free($self);
    }
}

%exception team_process_event {
    $action
    if (PyErr_Occurred() != NULL) {
        return NULL;
    }
}

void py_team_change_handler_register(struct team_handle *th,
                                     struct team_change_handler *handler);

void py_team_change_handler_unregister(struct team_handle *th,
                                       struct team_change_handler *handler);

%{
typedef struct _py_func_priv{
    PyObject* py_func;
    PyObject* func_priv;
} _py_func_priv;

static void PythonCallBack(struct team_handle *th, void *func_priv)
{
    PyObject *func, *arglist;
    PyObject *result;
    _py_func_priv *_func_priv = (_py_func_priv *) func_priv;
    func = _func_priv->py_func;     /* This is the function .... */

    arglist = Py_BuildValue("(O)",_func_priv->func_priv);
    result =  PyEval_CallObject(func, arglist);
    if (arglist != NULL)
        Py_DECREF(arglist);
    Py_XDECREF(result);
    return /*void*/;
}

void py_team_change_handler_register(struct team_handle *th,
                                     struct team_change_handler *handler)
{
    PyObject *py_func = (PyObject *) handler->func;
    handler->func = PythonCallBack;
    _py_func_priv *func_priv = malloc(sizeof(_py_func_priv));
    func_priv->py_func = py_func;
    func_priv->func_priv = (PyObject *) handler->func_priv;
    handler->func_priv = (void *) func_priv;

    Py_XINCREF(py_func);
    team_change_handler_register(th, handler);
}

void py_team_change_handler_unregister(struct team_handle *th,
                                       struct team_change_handler *handler)
{
    Py_XDECREF(((_py_func_priv *) handler->func_priv)->py_func);
    free(handler->func_priv);
    team_change_handler_unregister(th, handler);
}
%}

%include @top_srcdir@/include/team.h
